/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifter_1 (
    input [15:0] a,
    input [3:0] b,
    input [7:0] io_dip,
    output reg [15:0] out
  );
  
  
  
  reg [15:0] w;
  
  reg [15:0] x;
  
  reg [15:0] y;
  
  reg [15:0] z;
  
  always @* begin
    w = 1'h0;
    x = 1'h0;
    y = 1'h0;
    z = 1'h0;
    if (io_dip[0+7-:8] == 3'h5) begin
      
      case (b[0+0-:1])
        1'h0: begin
          w = a;
        end
        1'h1: begin
          w = a << 1'h1;
        end
      endcase
      
      case (b[1+0-:1])
        1'h0: begin
          x = w;
        end
        1'h1: begin
          x = w << 2'h2;
        end
      endcase
      
      case (b[2+0-:1])
        1'h0: begin
          y = x;
        end
        1'h1: begin
          y = x << 3'h4;
        end
      endcase
      
      case (b[3+0-:1])
        1'h0: begin
          z = y;
        end
        1'h1: begin
          z = y << 4'h8;
        end
      endcase
    end else begin
      if (io_dip[0+7-:8] == 3'h6) begin
        
        case (b[0+0-:1])
          1'h0: begin
            w = a;
          end
          1'h1: begin
            w = a >> 1'h1;
          end
        endcase
        
        case (b[1+0-:1])
          1'h0: begin
            x = w;
          end
          1'h1: begin
            x = w >> 2'h2;
          end
        endcase
        
        case (b[2+0-:1])
          1'h0: begin
            y = x;
          end
          1'h1: begin
            y = x >> 3'h4;
          end
        endcase
        
        case (b[3+0-:1])
          1'h0: begin
            z = y;
          end
          1'h1: begin
            z = y >> 4'h8;
          end
        endcase
      end else begin
        if (io_dip[0+7-:8] == 3'h7) begin
          
          case (b[0+0-:1])
            1'h0: begin
              w = a;
            end
            1'h1: begin
              w = a >>> 1'h1;
            end
          endcase
          
          case (b[1+0-:1])
            1'h0: begin
              x = w;
            end
            1'h1: begin
              x = w >>> 2'h2;
            end
          endcase
          
          case (b[2+0-:1])
            1'h0: begin
              y = x;
            end
            1'h1: begin
              y = x >>> 3'h4;
            end
          endcase
          
          case (b[3+0-:1])
            1'h0: begin
              z = y;
            end
            1'h1: begin
              z = y >>> 4'h8;
            end
          endcase
        end else begin
          z = a;
        end
      end
    end
    out = z;
  end
endmodule
