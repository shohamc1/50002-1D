module au_top (
    input clk,              // 100MHz clock 
    input rst_n,           // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,
    output io_led [3][8],   // LEDs on IO Shield
    output usb_tx,
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output io_sel [4],
    output io_seg [8]
  
  ) {
  
  sig rst;
  
  sig a_input[16], b_input[16], alufn_input[6];                  // reset signal
  
  .clk(clk) {
    .rst(rst){
      fsm state = {STORE_ALUFN, STORE_A, STORE_B, RESULT, TESTER, ERROR};
      tester test;
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
  }
  
  alu alu1;
  
  
  
  always {
    
    usb_tx = usb_rx;
    
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn LEDs off
    
    //setting temp value for alu input
    alu1.a = 16bx;
    alu1.b = 16bx;
    alu1.alufn = 6bx;
    test.button_signal = 0;
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    case (state.q) {
    
      state.STORE_ALUFN:
        //alu1.a = 16b0;
        //alu1.b = 16b0;
        //alu1.alufn = 6b0;
        io_led[2][7-:2] = 8h00;
        io_led[2][5-:6] = io_dip[2][5-:6];
        io_led[1][7-:8] = 8h00;
        io_led[0][7-:8] = 8h00; 
        alufn_input[5-:6] = io_dip[2][5-:6];
        
        
        if(io_button[0] == 1){
          test.button_signal = 0;
          alu1.alufn[5-:6] = alufn_input[5-:6];
          state.d = state.STORE_A;
        }
        else if(io_button[2] == 1){
          test.button_signal = 1;
          state.d = state.TESTER;
        }
        
      state.ERROR:
        io_led = 3x{{8hFF}};
        if(io_button[4] == 1){
          state.d = state.STORE_ALUFN;
        }
      
      state.STORE_A:
        io_led[2][7] = 1;
        io_led[2][6] = 0;
        
        if(alu1.check_alufn == 1){
          state.d = state.ERROR;
        }
        a_input[15-:8] = io_dip[1][7-:8];
        a_input[7-:8] = io_dip[0][7-:8];
        
        io_led[1][7-:8] = a_input[15-:8];
        io_led[0][7-:8] = a_input[7-:8];
        
        if(io_button[3] == 1){
          state.d = state.STORE_B;
          alu1.a[15-:16] = a_input[15-:16];
        }
        
      state.STORE_B:
        io_led[2][7] = 0;
        io_led[2][6] = 1;
        
        b_input[15-:8] = io_dip[1][7-:8];
        b_input[7-:8] = io_dip[0][7-:8];
        
        io_led[1][7-:8] = b_input[15-:8];
        io_led[0][7-:8] = b_input[7-:8];
        
        if(io_button[1] == 1){
          state.d = state.RESULT;
          alu1.b[15-:16] = b_input[15-:16];
        }
      
      state.RESULT:
        io_led[2][7] = 1;
        io_led[2][6] = 1;
        
        io_led[2][2-:3] = alu1.out[18-:3];
        io_led[1][7-:8] = alu1.out[15-:8];
        io_led[0][7-:8] = alu1.out[7-:8];
        if(io_button[4] == 1){    
          state.d = state.STORE_ALUFN;
        }
      
      state.TESTER:
        io_led[2][7] = 1;
        io_led[2][6] = 0;
        io_led[2][5] = 1;
        io_led[2][5-:6] = test.led_counter_signal;
        io_led[1][1-:2] = test.led_pass_fail_signal;
        
        if(io_button[2] == 1){    
          test.button_signal = 1;
          state.d = state.TESTER;
        }
        if(io_button[4] == 1){    
          test.button_signal = 0;
          state.d = state.STORE_ALUFN;
        }
        
  }
}
